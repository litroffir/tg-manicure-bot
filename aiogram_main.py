from __future__ import annotations

import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, BotCommand

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = Bot(token="7874319913:AAGJMeykamMTJ_GyP4P-f2S-ypS3XPCqVMU")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BookingStates(StatesGroup):
    choosing_action = State()
    choosing_master = State()
    choosing_service = State()
    choosing_date = State()
    entering_wishes = State()
    viewing_bookings = State()
    editing_booking = State()
    deleting_booking = State()


user_bookings = {}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç
def generate_dates():
    return [
        (datetime.now() + timedelta(days=i)).strftime("%d.%m %H:%M")
        for i in range(1, 8)
    ]


async def check_inactivity(state: FSMContext):
    data = await state.get_data()
    last_activity = data.get('last_activity')
    if last_activity and (datetime.now() - last_activity).seconds > 5:
        await state.clear()
        return True
    return False


# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def update_last_activity(state: FSMContext):
    await state.update_data(last_activity=datetime.now())


async def reset_inactivity_timer(state: FSMContext):
    await update_last_activity(state)
    asyncio.create_task(inactivity_checker(state))


async def inactivity_checker(state: FSMContext):
    await asyncio.sleep(5)  # 5 –º–∏–Ω—É—Ç
    if await check_inactivity(state):
        pass
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # return


@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await show_main_menu(message)
    # await state.set_state(BookingStates.choosing_action)
    await reset_inactivity_timer(state)


async def show_main_menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book")],
        [types.InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
    ])
    await message.answer(
        "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Beauty Bits!* üå∏\n\n"
        "üéÄ *–ê–∫—Ü–∏—è:* –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 15%!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@dp.callback_query(F.data == "book")
async def choose_master(callback: types.Message | types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return

    await reset_inactivity_timer(state)
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ö—Å–µ–Ω–∏—è üíÖ", callback_data="master_kseniya")],
        [types.InlineKeyboardButton(text="–ê–Ω–∞—Å—Ç–∞—Å–∏—è üëë", callback_data="master_anastasia")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    if isinstance(callback, types.CallbackQuery):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard)
    else:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard)
    await state.set_state(BookingStates.choosing_master)


@dp.message(Command("book"))
async def start_booking_command(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
    if await check_inactivity(state):
        await message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
        await state.clear()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await reset_inactivity_timer(state)
    await choose_master(message, state)


# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@dp.callback_query(F.data.startswith("master_"))
async def choose_service(callback: types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return

    await reset_inactivity_timer(state)

    master = callback.data.split("_")[1]
    await state.update_data(master="–ö—Å–µ–Ω–∏—è" if master == "master_kseniya" else "–ê–Ω–∞—Å—Ç–∞—Å–∏—è")

    if master == "kseniya":
        services = [
            ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä üíÖ", "service_classic"],
            ["–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä üîß", "service_apparatus"]
        ]
    else:
        services = [
            ["–ú–∞–Ω–∏–∫—é—Ä üíÖ", "service_manicure"],
            ["–ü–µ–¥–∏–∫—é—Ä üë£", "service_pedicure"]
        ]

    buttons = [
        [types.InlineKeyboardButton(text=text, callback_data=data)]
        for text, data in services
    ]
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_masters")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=keyboard
    )
    await state.set_state(BookingStates.choosing_service)


# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("service_"))
async def choose_date(callback: types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return

    await reset_inactivity_timer(state)

    service = callback.data.split("_")[1]
    if service == "classic":
        await state.update_data(service="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä")
    elif service == "apparatus":
        await state.update_data(service="–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä")
    elif service == "manicure":
        await state.update_data(service="–ú–∞–Ω–∏–∫—é—Ä")
    else:
        await state.update_data(service="–ü–µ–¥–∏–∫—é—Ä")

    dates = generate_dates()
    buttons = [
        [types.InlineKeyboardButton(text=date, callback_data=f"date_{date}")]
        for date in dates
    ]
    buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_services")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=keyboard
    )
    await state.set_state(BookingStates.choosing_date)


# –í–≤–æ–¥ –ø–æ–∂–µ–ª–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("date_"))
async def enter_wishes(callback: types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return

    await reset_inactivity_timer(state)

    date = callback.data.split("_", 1)[1]
    await state.update_data(date=date)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    )
    await callback.message.answer(
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
    )
    await state.set_state(BookingStates.entering_wishes)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@dp.message(BookingStates.entering_wishes)
async def confirm_booking(message: types.Message, state: FSMContext):
    data = await state.get_data()
    wishes = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã" if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    booking_id = datetime.now().strftime("%Y%m%d%H%M%S")
    user_id = message.from_user.id
    if user_id not in user_bookings:
        user_bookings[user_id] = {}

    user_bookings[user_id][booking_id] = {
        "master": data['master'],
        "service": data['service'],
        "date": data['date'],
        "wishes": wishes
    }

    text = (
        "‚ú® *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚ú®\n\n"
        f"üë©üé® –ú–∞—Å—Ç–µ—Ä: {data['master']}\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {data['service']}\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}"
    )

    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await start(message, state)


@dp.message(Command("my_bookings"))
@dp.callback_query(F.data == "my_bookings")
async def show_bookings(message_or_query: types.Message | types.CallbackQuery, state: FSMContext):
    user_id = message_or_query.from_user.id
    if isinstance(message_or_query, types.CallbackQuery):
        message = message_or_query.message
        await message_or_query.answer()
    else:
        message = message_or_query

    if user_id not in user_bookings or not user_bookings[user_id]:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return

    await state.set_state(BookingStates.viewing_bookings)
    await show_bookings_list(message, user_id)


async def show_bookings_list(message: types.Message, user_id: int):
    bookings = user_bookings.get(user_id, {})
    if not bookings:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    for booking_id, booking in bookings.items():
        text = f"{booking['date']} - {booking['service']} ({booking['master']})"
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text=text,
                callback_data=f"view_booking_{booking_id}"
            )
        ])

    keyboard.inline_keyboard.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])

    await message.answer(
        "üìñ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
@dp.callback_query(F.data.startswith("view_booking_"))
async def handle_booking_selection(callback: types.CallbackQuery, state: FSMContext):
    booking_id = callback.data.split("_")[2]
    user_id = callback.from_user.id

    if user_id not in user_bookings or booking_id not in user_bookings[user_id]:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    booking = user_bookings[user_id][booking_id]
    text = (
        f"üë©üé® –ú–∞—Å—Ç–µ—Ä: {booking['master']}\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {booking['service']}\n"
        f"üìÖ –î–∞—Ç–∞: {booking['date']}\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {booking['wishes']}"
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{booking_id}"),
            types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{booking_id}")
        ],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings")]
    ])

    await callback.message.edit_text(
        f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:\n\n{text}",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏
@dp.callback_query(F.data.startswith("edit_"))
async def edit_booking(callback: types.CallbackQuery, state: FSMContext):
    booking_id = callback.data.split("_")[1]
    user_id = callback.from_user.id

    await state.update_data(current_booking=booking_id)
    await state.set_state(BookingStates.editing_booking)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                                  reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                      [types.InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä–∞", callback_data="edit_master")],
                                      [types.InlineKeyboardButton(text="–£—Å–ª—É–≥—É", callback_data="edit_service")],
                                      [types.InlineKeyboardButton(text="–î–∞—Ç—É", callback_data="edit_date")],
                                      [types.InlineKeyboardButton(text="–ü–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="edit_wishes")],
                                      [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_booking")]
                                  ]))


@dp.callback_query(F.data.startswith("delete_"))
async def delete_booking(callback: types.CallbackQuery):
    booking_id = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if user_id in user_bookings and booking_id in user_bookings[user_id]:
        del user_bookings[user_id][booking_id]
        await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        await show_bookings_list(callback.message, user_id)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return
    else:
        await reset_inactivity_timer(state)
        await start(callback.message, state)


@dp.callback_query(F.data == "back_to_masters")
async def back_to_masters(callback: types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return
    else:
        await reset_inactivity_timer(state)
        await choose_master(callback, state)


@dp.callback_query(F.data == "back_to_services")
async def back_to_services(callback: types.CallbackQuery, state: FSMContext):
    if await check_inactivity(state):
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—Å–∞–≤ /start", show_alert=True)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        return
    else:
        await reset_inactivity_timer(state)
        data = await state.get_data()
        await choose_service(callback, state)


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="book", description="–ó–∞–ø–∏—Å—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä"),
        BotCommand(command="my_bookings", description="–ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
        BotCommand(command="masters", description="–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
    ]
    await bot.set_my_commands(commands)


async def on_shutdown(dp):
    await storage.close()

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    dp.startup.register(set_commands)
    dp.run_polling(bot)