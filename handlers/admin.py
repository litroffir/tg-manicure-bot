from __future__ import annotations

import datetime

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile

from models import AppointmentDAO, BaseDAO
from utils import admin_dates_kb, generate_excel, admin_choice_kb, admin_stats_kb

admin_router = Router()


@admin_router.callback_query(F.data == "clients")
async def admin_choice_kb_hadndler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ  –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                                     reply_markup=admin_choice_kb())


@admin_router.callback_query(F.data == "clients_books")
async def admin_kb_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–æ–∑–æ–Ω:",
        reply_markup=admin_dates_kb()
    )


@admin_router.callback_query(F.data.startswith("show_users_books"))
async def show_users_appointments(callback: types.CallbackQuery, state: FSMContext):
    callback_date = callback.data.split("_")[-1]
    if callback_date == "today":
        result = await AppointmentDAO.select_appointments_by_date(datetime.date.today(), datetime.date.today())
        if result:
            await callback.message.edit_text(text="‚ú® *–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏* ‚ú®\n\n{}".format('\n'.join(result)),
                                             reply_markup=InlineKeyboardMarkup(
                                                 inline_keyboard=[
                                                     [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="clients_books")]]))
        else:
            await callback.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç!", show_alert=True)
    elif callback_date == "tomorrow":
        result = await AppointmentDAO.select_appointments_by_date(datetime.date.today() + datetime.timedelta(days=1),
                                                                  datetime.date.today() + datetime.timedelta(days=1))
        if result:
            await callback.message.edit_text(text="‚ú® *–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏* ‚ú®\n\n{}".format('\n'.join(result)),
                                             reply_markup=InlineKeyboardMarkup(
                                                 inline_keyboard=[
                                                     [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="clients_books")]]))
        else:
            await callback.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç!", show_alert=True)
    elif callback_date == "week":
        start_date = datetime.datetime.now().date()
        end_date = start_date + datetime.timedelta(days=7)
        result = await AppointmentDAO.select_appointments_by_date(start_date=start_date, end_date=end_date, csv=True)

        if result:
            excel_data = await generate_excel(result)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="weekly_appointments.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –ó–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é"
            )
        else:
            await callback.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç!", show_alert=True)
    elif callback_date == "month":
        start_date = datetime.datetime.now().date()
        end_date = start_date + datetime.timedelta(days=30)
        result = await AppointmentDAO.select_appointments_by_date(start_date=start_date, end_date=end_date, csv=True)
        if result:
            excel_data = await generate_excel(result)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="monthly_appointments.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –ó–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü"
            )
        else:
            await callback.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç!", show_alert=True)


@admin_router.callback_query(F.data == "clients_stats")
async def admin_stats_kb_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=admin_stats_kb()
    )


@admin_router.callback_query(F.data.startswith("show_users_stats"))
async def show_users_stats(callback: types.CallbackQuery, state: FSMContext):
    callback_date = callback.data.split("_")[-1]
    if callback_date == "today":
        result = await BaseDAO.find_all_by_date(datetime.date.today(), datetime.date.today())
        if result:
            excel_data = await generate_excel(result, stats=True)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="day_stat.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å:"
            )
        else:
            await callback.answer("–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!", show_alert=True)
    elif callback_date == "yesterday":
        result = await BaseDAO.find_all_by_date(datetime.date.today() - datetime.timedelta(days=1),
                                                datetime.date.today() - datetime.timedelta(days=1))
        if result:
            excel_data = await generate_excel(result, stats=True)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="yesterday_stat.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞:"
            )
        else:
            await callback.answer("–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!", show_alert=True)
    elif callback_date == "week":
        start_date = datetime.datetime.now().date()
        end_date = start_date - datetime.timedelta(days=7)
        result = await BaseDAO.find_all_by_date(start_date=end_date, end_date=start_date)

        if result:
            excel_data = await generate_excel(result, stats=True)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="week_stat.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é:"
            )
        else:
            await callback.answer("–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!", show_alert=True)
    elif callback_date == "month":
        start_date = datetime.datetime.now().date()
        end_date = start_date - datetime.timedelta(days=30)
        result = await BaseDAO.find_all_by_date(start_date=end_date, end_date=start_date)
        if result:
            excel_data = await generate_excel(result, stats=True)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="month_stat.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
            )
        else:
            await callback.answer("–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!", show_alert=True)
    else:
        result = await BaseDAO.find_all_by_date(all_time=True)
        if result:
            excel_data = await generate_excel(result, stats=True)
            excel_file = BufferedInputFile(
                file=excel_data,
                filename="all_stat.xlsx"
            )
            await callback.message.reply_document(
                document=excel_file,
                caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
            )
        else:
            await callback.answer("–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!", show_alert=True)
