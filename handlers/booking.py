from __future__ import annotations

from datetime import datetime

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from handlers import start
from states import BookingStates
from utils import (
    master_choice_kb,
    service_choice_kb,
    dates_kb,
    wishes_kb
)
from utils.storage import user_bookings

book_router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@book_router.message(Command("book"))
@book_router.callback_query(F.data == "book")
async def choose_master(callback: types.Message | types.CallbackQuery, state: FSMContext):
    if isinstance(callback, types.CallbackQuery):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=master_choice_kb())
    else:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=master_choice_kb())
    await state.set_state(BookingStates.choosing_master)


# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@book_router.callback_query(F.data.startswith("master_"))
async def choose_service(callback: types.CallbackQuery, state: FSMContext):
    master = callback.data.split("_")[1]
    await state.update_data(master="–ö—Å–µ–Ω–∏—è" if master == "kseniya" else "–ê–Ω–∞—Å—Ç–∞—Å–∏—è")

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=service_choice_kb(master)
    )
    await state.set_state(BookingStates.choosing_service)


# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@book_router.callback_query(F.data.startswith("service_"))
async def choose_date(callback: types.CallbackQuery, state: FSMContext):
    service = callback.data.split("_")[1]
    if service == "classic":
        await state.update_data(service="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä")
    elif service == "apparatus":
        await state.update_data(service="–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä")
    elif service == "manicure":
        await state.update_data(service="–ú–∞–Ω–∏–∫—é—Ä")
    else:
        await state.update_data(service="–ü–µ–¥–∏–∫—é—Ä")

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=dates_kb()
    )
    await state.set_state(BookingStates.choosing_date)


# –í–≤–æ–¥ –ø–æ–∂–µ–ª–∞–Ω–∏–π
@book_router.callback_query(F.data.startswith("date_"))
async def enter_wishes(callback: types.CallbackQuery, state: FSMContext):
    date = callback.data.split("_", 1)[1]
    await state.update_data(date=date)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    )
    await callback.message.answer(
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=wishes_kb()
    )
    await state.set_state(BookingStates.entering_wishes)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@book_router.message(BookingStates.entering_wishes)
async def confirm_booking(message: types.Message, state: FSMContext):
    data = await state.get_data()
    wishes = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã" if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    booking_id = datetime.now().strftime("%Y%m%d%H%M%S")
    user_id = message.from_user.id
    if user_id not in user_bookings:
        user_bookings[user_id] = {}

    user_bookings[user_id][booking_id] = {
        "master": data['master'],
        "service": data['service'],
        "date": data['date'],
        "wishes": wishes
    }

    text = (
        "‚ú® *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚ú®\n\n"
        f"üë©üé® –ú–∞—Å—Ç–µ—Ä: {data['master']}\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {data['service']}\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}"
    )

    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await start(message, state)