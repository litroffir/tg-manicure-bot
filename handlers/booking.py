from __future__ import annotations

import numpy as np

import datetime

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram_calendar import SimpleCalendarCallback

from sqlalchemy import select

from handlers import start
from models import Appointment
from states import BookingStates
from utils import (
    master_choice_kb,
    service_choice_kb,
    wishes_kb,
    time_keyboard, get_time_slots, myCalendar
)

from utils import async_session

book_router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@book_router.message(Command("book"))
@book_router.callback_query(F.data == "book")
async def choose_master(callback: types.Message | types.CallbackQuery, state: FSMContext):
    if isinstance(callback, types.CallbackQuery):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=master_choice_kb())
    else:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=master_choice_kb())
    await state.set_state(BookingStates.choosing_master)


# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@book_router.callback_query(F.data.startswith("master_"))
async def choose_service(callback: types.CallbackQuery, state: FSMContext):
    master = callback.data.split("_")[1]
    if master == "kseniya":
        await state.update_data(master="–ö—Å–µ–Ω–∏—è")
    elif master == "anastasia":
        await state.update_data(master="–ê–Ω–∞—Å—Ç–∞—Å–∏—è")

    data = await state.get_data()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=service_choice_kb("kseniya" if data["master"] == "–ö—Å–µ–Ω–∏—è" else "anastasia")
    )
    await state.set_state(BookingStates.choosing_service)


# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@book_router.callback_query(F.data.startswith("service_"))
async def choose_date(callback: types.CallbackQuery, state: FSMContext):
    service = callback.data.split("_")[1]
    if service == "classic":
        await state.update_data(service="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä")
    elif service == "apparatus":
        await state.update_data(service="–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä")
    elif service == "manicure":
        await state.update_data(service="–ú–∞–Ω–∏–∫—é—Ä")
    elif service == "pedicure":
        await state.update_data(service="–ü–µ–¥–∏–∫—é—Ä")

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await myCalendar.start_calendar()
    )
    await state.set_state(BookingStates.choosing_date)


@book_router.callback_query(SimpleCalendarCallback.filter())
async def choose_time(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date_selected = await myCalendar.process_selection(callback, callback_data, state)
    if not selected:
        return
    convrt_date = datetime.date(year=date_selected.year, month=date_selected.month, day=date_selected.day)
    if convrt_date < datetime.date.today() or convrt_date.isoweekday() in (6, 7):
        await callback.answer("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–ºüò•", show_alert=True)
        return
    await state.update_data(selected_date=convrt_date)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=time_keyboard(await get_time_slots())
    )
    await state.set_state(BookingStates.choosing_time)


@book_router.callback_query(F.data.startswith("time_"))
async def enter_wishes(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_time = callback.data.split("_")[1]
    start_dttm = datetime.datetime(year=data["selected_date"].year, month=data["selected_date"].month,
                                   day=data["selected_date"].day,
                                   hour=int(selected_time.split('-')[0].split(":")[0]),
                                   minute=int(selected_time.split('-')[0].split(":")[1]), second=0)
    end_dttm = datetime.datetime(year=data["selected_date"].year, month=data["selected_date"].month,
                                 day=data["selected_date"].day,
                                 hour=int(selected_time.split('-')[1].split(":")[0]),
                                 minute=int(selected_time.split('-')[1].split(":")[1]), second=0)
    if start_dttm < datetime.datetime.now():
        await callback.answer("–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æüò•", show_alert=True)
        return

    async with async_session() as session:
        existing = (await session.execute(
            select(Appointment).where((Appointment.start_datetime == start_dttm)
                                      & (Appointment.end_datetime == end_dttm)
                                      & (Appointment.master == data["master"]))
        )).scalar_one_or_none()

        if existing:
            await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
            return

    await state.update_data(selected_start_datetime=start_dttm, selected_end_datetime=end_dttm)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {data['selected_date']}\n"
        f"–í—Ä–µ–º—è: {start_dttm.strftime('%H:%M')}-{end_dttm.strftime('%H:%M')}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    )
    await callback.message.answer(
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=wishes_kb()
    )
    await state.set_state(BookingStates.entering_wishes)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@book_router.message(BookingStates.entering_wishes)
async def confirm_booking(message: types.Message, state: FSMContext):
    data = await state.get_data()
    wishes = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã" if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    booking_id = datetime.datetime.now().strftime("%Y%m%d%H%M%S")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    async with async_session() as session:
        new_appointment = Appointment(
            user_id=message.from_user.id,
            booking_id=np.int64(booking_id),
            master=data['master'],
            service=data['service'],
            wishes=wishes,
            start_datetime=data['selected_start_datetime'],
            end_datetime=data["selected_end_datetime"]
        )
        session.add(new_appointment)
        await session.commit()

    text = (
        "‚ú® *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚ú®\n\n"
        f"üë© –ú–∞—Å—Ç–µ—Ä: {data['master']}\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {data['service']}\n\n"
        f"üìÖ –î–∞—Ç–∞: {data['selected_start_datetime'].strftime('%Y-%m-%d %H:%M')}-{data['selected_end_datetime'].strftime('%H:%M')}\n\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}"
    )

    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await start(message, state)
