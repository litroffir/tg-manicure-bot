from __future__ import annotations

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from states import BookingStates
from utils.storage import user_bookings, BotHolder
from utils import (
    bookings_kb,
    booking_selection_kb,
    edit_booking_kb,
    master_choice_kb, service_choice_kb, dates_kb
)

book_management_router = Router()


async def get_current_booking_data(user_id, state: FSMContext) -> tuple[str, dict]:
    data = await state.get_data()
    return data['current_booking'], user_bookings[user_id][data['current_booking']]


@book_management_router.message(Command("my_bookings"))
@book_management_router.callback_query(F.data == "my_bookings")
async def show_bookings(callback: types.Message | types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    bookings = user_bookings.get(user_id, {})
    if not bookings:
        if isinstance(callback, types.CallbackQuery):
            await callback.message.edit_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
                                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                 [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                                                             callback_data="back_to_menu")]
                                             ]))
            return
        else:
            await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                      [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                                  ]))
            return

    if isinstance(callback, types.CallbackQuery):
        await callback.message.edit_text("üìñ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:", reply_markup=bookings_kb(bookings))
    else:
        await callback.answer("üìñ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:", reply_markup=bookings_kb(bookings))
    await state.set_state(BookingStates.viewing_bookings)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
@book_management_router.callback_query(F.data.startswith("view_booking_"))
async def handle_booking_selection(callback: types.CallbackQuery, state: FSMContext):

    booking_id = callback.data.split("_")[2]
    user_id = callback.from_user.id

    if user_id not in user_bookings or booking_id not in user_bookings[user_id]:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    booking = user_bookings[user_id][booking_id]
    text = (
        f"üë©üé® –ú–∞—Å—Ç–µ—Ä: {booking['master']}\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {booking['service']}\n\n"
        f"üìÖ –î–∞—Ç–∞: {booking['date']}\n\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {booking['wishes']}"
    )

    await callback.message.edit_text(
        f"üìÑ –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:\n\n{text}",
        reply_markup=booking_selection_kb(booking_id)
    )
    await state.update_data(original_message_id=callback.message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏
@book_management_router.callback_query(F.data.startswith("edit_"))
async def edit_booking(callback: types.CallbackQuery, state: FSMContext):
    booking_id = callback.data.split("_")[1]
    user_id = callback.from_user.id

    await state.update_data(current_booking=booking_id)
    await state.set_state(BookingStates.editing_booking)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_booking_kb(booking_id))


@book_management_router.callback_query(F.data.startswith("delete_"))
async def delete_booking(callback: types.CallbackQuery, state: FSMContext):
    booking_id = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if user_id in user_bookings and booking_id in user_bookings[user_id]:
        del user_bookings[user_id][booking_id]
        await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        from handlers.common import back_to_bookings
        await back_to_bookings(callback, state)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
@book_management_router.callback_query(F.data.startswith("editingMaster_"))
async def edit_master_handler(callback: types.CallbackQuery, state: FSMContext):
    booking_id = callback.data.split("_")[1]

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=master_choice_kb(True, booking_id)
    )
    await state.set_state(BookingStates.editing_master)


@book_management_router.callback_query(
    F.data.startswith("master_"),
    BookingStates.editing_master
)
async def process_edit_master(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    booking_id = data['current_booking']
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    master = "–ö—Å–µ–Ω–∏—è" if "kseniya" in callback.data else "–ê–Ω–∞—Å—Ç–∞—Å–∏—è"
    user_bookings[user_id][booking_id]['master'] = master

    await callback.answer("–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", show_alert=True)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:",
        reply_markup=service_choice_kb(callback.data.split("_")[1], True, booking_id)
    )


@book_management_router.callback_query(
    F.data.startswith("service_"),
    BookingStates.editing_master
)
async def process_edit_master_service(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    booking_id = data['current_booking']
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    service = callback.data.split("_")[1]
    if service == "classic":
        user_bookings[user_id][booking_id]['service'] = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä"
    elif service == "apparatus":
        user_bookings[user_id][booking_id]['service'] = "–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä"
    elif service == "manicure":
        user_bookings[user_id][booking_id]['service'] = "–ú–∞–Ω–∏–∫—é—Ä"
    else:
        user_bookings[user_id][booking_id]['service'] = "–ü–µ–¥–∏–∫—é—Ä"

    await callback.answer("–£—Å–ª—É–≥–∞ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
    from handlers.common import back_to_bookings
    await back_to_bookings(callback, state)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
@book_management_router.callback_query(F.data.startswith("editingService_"))
async def edit_service_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    booking_id = callback.data.split("_")[1]

    master = "kseniya" if user_bookings[user_id][booking_id]['master'] == "–ö—Å–µ–Ω–∏—è" else "anastasia"
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:",
        reply_markup=service_choice_kb(master, True, booking_id)
    )
    await state.set_state(BookingStates.editing_service)


@book_management_router.callback_query(
    F.data.startswith("service_"),
    BookingStates.editing_service
)
async def process_edit_service(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    booking_id = data['current_booking']
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    service = callback.data.split("_")[1]
    if service == "classic":
        user_bookings[user_id][booking_id]['service'] = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä"
    elif service == "apparatus":
        user_bookings[user_id][booking_id]['service'] = "–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä"
    elif service == "manicure":
        user_bookings[user_id][booking_id]['service'] = "–ú–∞–Ω–∏–∫—é—Ä"
    else:
        user_bookings[user_id][booking_id]['service'] = "–ü–µ–¥–∏–∫—é—Ä"

    await callback.answer("–£—Å–ª—É–≥–∞ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
    from handlers.common import back_to_bookings
    await back_to_bookings(callback, state)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
@book_management_router.callback_query(F.data.startswith("editingDate_"))
async def edit_date_handler(callback: types.CallbackQuery, state: FSMContext):
    booking_id = callback.data.split("_")[1]

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=dates_kb(True, booking_id)
    )
    await state.set_state(BookingStates.editing_date)


@book_management_router.callback_query(
    F.data.startswith("date_"),
    BookingStates.editing_date
)
async def process_edit_date(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    booking_id = data['current_booking']
    user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    date = callback.data.split("_", 1)[1]
    user_bookings[user_id][booking_id]['date'] = date

    await callback.answer("–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
    from handlers.common import back_to_bookings
    await back_to_bookings(callback, state)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π
@book_management_router.callback_query(F.data.startswith("editingWishes_"))
async def edit_wishes_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_bookings")]])
    )
    await state.set_state(BookingStates.editing_wishes)


@book_management_router.message(
    BookingStates.editing_wishes
)
async def process_edit_wishes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data['current_booking']
    user_id = message.from_user.id
    wishes = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    user_bookings[user_id][booking_id]["wishes"] = wishes

    await message.answer("–•–æ—Ä–æ—à–æ!", show_alert=True)
    from handlers.common import back_to_bookings
    await back_to_bookings(message, state)