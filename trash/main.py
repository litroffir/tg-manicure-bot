import logging
from datetime import datetime, timedelta

from telegram import (
    BotCommand,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove
)

from telegram.ext import (
    Application,
    filters,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECTING_ACTION, CHOOSING_MASTER, CHOOSING_SERVICE, CHOOSING_DATE, ENTERING_WISHES = map(chr, range(5))
END = ConversationHandler.END

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
users_data = {}


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä)


def generate_dates():
    return [
        (datetime.now() + timedelta(days=i)).strftime("%d.%m %H:%M")
        for i in range(1, 8)
    ]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [
            InlineKeyboardButton("üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=str(CHOOSING_MASTER)),
            # InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")
        ],
    ]

    if update.message:
        await update.message.reply_text(
            "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Beauty Bits!* üå∏\n\n"
            "üéÄ *–ê–∫—Ü–∏—è:* –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 15%!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Beauty Bits!* üå∏\n\n"
            "üéÄ *–ê–∫—Ü–∏—è:* –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 15%!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    return SELECTING_ACTION


# async def book_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_booking"""
#     query = update.callback_query
#     await query.answer()
#
#     # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
#     new_context = context.__class__(context.application)
#     new_context._chat_id = query.message.chat_id
#     new_context._user_id = query.from_user.id
#     new_context.user_data = context.user_data
#
#     # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é
#     return await start_booking(update, new_context)
#     # query = update.callback_query
#     # await query.answer()
#     #
#     # await context.bot.send_message(
#     #     chat_id=query.message.chat_id,
#     #     text="/new\\_booking",
#     #     parse_mode="Markdown"
#     # )


async def choose_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = context._user_id
    if user not in users_data:
        users_data[user] = {}

    keyboard = [
        [InlineKeyboardButton("–ö—Å–µ–Ω–∏—è üíÖ")],
        [InlineKeyboardButton("–ê–Ω–∞—Å—Ç–∞—Å–∏—è üëë")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=str(END))]
    ]

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    return CHOOSING_MASTER


async def choose_service(update: Update, context: CallbackContext) -> int:
    master = update.callback_query.data
    print(master)
    # master = update.message.text
    # context.user_data['master'] = master

    if "–ö—Å–µ–Ω–∏—è" in master:
        services = [
            [InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä üíÖ")],
            [InlineKeyboardButton("–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä üîß")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º")]
        ]
    else:
        services = [
            [InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä üíÖ")],
            [InlineKeyboardButton("–ü–µ–¥–∏–∫—é—Ä üë£")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º")]
        ]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(services),
    )

    return CHOOSING_SERVICE


async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # await update.callback_query.message.edit_reply_markup(None)

    # if update.callback_query:
    #     query = update.callback_query
    #     await query.answer()
    #     service = query.data.split('_')[1]
    #     chat_id = query.message.chat_id
    # else:
    service = update.message.text
    users_data[context._user_id]["service"] = service

    dates = generate_dates()
    keyboard = [[InlineKeyboardButton(date, callback_data=f"date_{date}")] for date in dates] \
               + [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services")]]

    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CHOOSING_DATE


async def enter_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()

    date = query.data.split('_')[1]
    users_data[context._user_id]['date'] = date

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    await query.edit_message_reply_markup(reply_markup=None)

    await query.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=ReplyKeyboardMarkup([
            ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º"]
        ], resize_keyboard=True)
    )
    return ENTERING_WISHES


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    wishes = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã" if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
    users_data[context._user_id]['wishes'] = wishes

    booking = users_data[context._user_id]
    text = (
        "‚ú® *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚ú®\n\n"
        f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {booking['master']}\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {booking['service']}\n"
        f"üìÖ –î–∞—Ç–∞: {booking['date']}\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}"
    )

    await update.message.reply_text(
        text,
        parse_mode="Markdown"
    )
    await start(update, context)
    return ConversationHandler.END


# async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     await query.answer()
#
#     user = query.from_user
#     wishes = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã" if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
#     users_data[user.id]['wishes'] = wishes
#
#     booking = users_data[user.id]
#     text = (
#         "‚ú® *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚ú®\n\n"
#         f"üë©‚Äçüé® *–ú–∞—Å—Ç–µ—Ä:* {booking['master']}\n"
#         f"üíÖ *–£—Å–ª—É–≥–∞:* {booking['service']}\n"
#         f"üìÖ *–î–∞—Ç–∞:* {booking['date']}\n"
#         f"üìù *–ü–æ–∂–µ–ª–∞–Ω–∏—è:* {wishes}\n\n"
#         "–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ!"
#     )
#
#     await update.message.reply_text(
#         text,
#         reply_markup=ReplyKeyboardRemove(),
#         parse_mode="Markdown"
#     )
#     await start(update, context)
#     return ConversationHandler.END


async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    return await choose_service(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    del users_data[user.id]

    await update.message.reply_text(
        '–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏! üíå',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


async def set_commands(app: Application):
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("new_booking", "–ó–∞–ø–∏—Å—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä"),
        BotCommand("my_bookings", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
        BotCommand("masters", "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
    ]
    await app.bot.set_my_commands(commands)


async def back_to_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_reply_markup(reply_markup=None)

    master = context.user_data.get('master', '')

    if "–ö—Å–µ–Ω–∏—è" in master:
        services = [
            ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä üíÖ"],
            ["–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä üîß"]
        ]
    else:
        services = [
            ["–ú–∞–Ω–∏–∫—é—Ä üíÖ"],
            ["–ü–µ–¥–∏–∫—é—Ä üë£"],
            ["–ö–æ–º–±–æ üíé"]
        ]

    services.append(["üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º"])

    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=ReplyKeyboardMarkup(services, resize_keyboard=True)
    )
    return CHOOSING_SERVICE


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await start(update, context)
    return ConversationHandler.END


def main():
    app = Application.builder().token("7874319913:AAGJMeykamMTJ_GyP4P-f2S-ypS3XPCqVMU").post_init(set_commands).build()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    app.add_handler(CommandHandler('start', start))

    booking_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                choose_master, pattern="^" + str(CHOOSING_MASTER) + "$"
            )
        ],
        states={
            CHOOSING_MASTER: [
                CallbackQueryHandler(choose_service, pattern="^" + str(CHOOSING_SERVICE) + "$")
            ],
            CHOOSING_SERVICE: [CallbackQueryHandler(choose_date, pattern="^" + str(CHOOSING_DATE) + "$")],
            CHOOSING_DATE: [
                CallbackQueryHandler(enter_wishes, pattern="^" + str(ENTERING_WISHES) + "$")
            ],
            # ENTERING_WISHES: [
            #     CallbackQueryHandler(enter_wishes, pattern="^" + str(ENTERING_WISHES) + "$")
            # ]
        },
        fallbacks=[
            CallbackQueryHandler(back_to_menu, pattern="^" + str(END) + "$"),
        ],
        map_to_parent={
            # Return to second level menu
            END: SELECTING_ACTION,
        },
    )

    # Set up second level ConversationHandler (adding a person)

    # Set up top level ConversationHandler (selecting action)
    # Because the states of the third level conversation map to the ones of the second level
    # conversation, we need to make sure the top level conversation can also handle them
    # selection_handlers = [
    #     add_member_conv,
    #     CallbackQueryHandler(show_data, pattern="^" + str(SHOWING) + "$"),
    #     CallbackQueryHandler(adding_self, pattern="^" + str(ADDING_SELF) + "$"),
    #     CallbackQueryHandler(end, pattern="^" + str(END) + "$"),
    # ]
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            # SHOWING: [CallbackQueryHandler(start, pattern="^" + str(END) + "$")],
            SELECTING_ACTION: [booking_conv],
            # SELECTING_LEVEL: selection_handlers,
            # DESCRIBING_SELF: [description_conv],
            # STOPPING: [CommandHandler("start", start)],
        },
        fallbacks=[CommandHandler("stop", back_to_menu)],
    )

    app.add_handler(conv_handler)
    # app.add_handler(CallbackQueryHandler(book_now, pattern="^book_now$"))
    # app.add_handler(CallbackQueryHandler(start, pattern="^back_to_menu$"))

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
    # app.add_handler(CallbackQueryHandler(show_bookings, pattern="^my_bookings$"))

    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏
    # conv_handler = ConversationHandler(
    #     entry_points=[
    #         CommandHandler("new_booking", start_booking)
    #     ],
    #     states={
    #         CHOOSING_MASTER: [
    #             MessageHandler(filters.Regex(r'^(–ö—Å–µ–Ω–∏—è|–ê–Ω–∞—Å—Ç–∞—Å–∏—è)'), choose_master),
    #             MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'), back_to_menu)
    #         ],
    #         CHOOSING_SERVICE: [
    #             MessageHandler(filters.Regex(r'^(–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π|–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π|–ú–∞–Ω–∏–∫—é—Ä|–ü–µ–¥–∏–∫—é—Ä|–ö–æ–º–±–æ)'), choose_service),
    #             MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º$'), back_to_masters)
    #         ],
    #         CHOOSING_DATE: [
    #             CallbackQueryHandler(handle_date_selection, pattern="^date_"),
    #             CallbackQueryHandler(back_to_services, pattern="^back_to_services$")
    #         ],
    #         ENTERING_WISHES: [
    #             MessageHandler(filters.TEXT & ~filters.COMMAND, enter_wishes),
    #             MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º$'), back_to_dates)
    #         ]
    #     },
    #     fallbacks=[
    #         CommandHandler("start", back_to_menu),
    #         CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")
    #     ],
    #     allow_reentry=True
    # )
    # conv_handler = ConversationHandler(
    #     entry_points=[CommandHandler("book", start_booking),
    #                   CallbackQueryHandler(start_booking, pattern="^book$")
    #                   ],
    #     states={
    #         CHOOSING_MASTER: [
    #             MessageHandler(
    #                 filters.Regex(r'^(–ö—Å–µ–Ω–∏—è|–ê–Ω–∞—Å—Ç–∞—Å–∏—è)'),
    #                 choose_master
    #             ),
    #             MessageHandler(
    #                 filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é$'),
    #                 back_to_menu
    #             )
    #         ],
    #         CHOOSING_SERVICE: [
    #             # CallbackQueryHandler(choose_date, pattern="^choose_date$"),
    #             CallbackQueryHandler(choose_service, pattern="^book$"),
    #             MessageHandler(
    #                 filters.Regex(r'^(–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π|–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π|–ú–∞–Ω–∏–∫—é—Ä|–ü–µ–¥–∏–∫—é—Ä|–ö–æ–º–±–æ)'),
    #                 choose_service
    #             ),
    #             # CallbackQueryHandler(choose_date, pattern="^choose_date$"),
    #             CallbackQueryHandler(back_to_masters, pattern="^back_to_masters$"),
    #             MessageHandler(
    #                 filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º$'),
    #                 back_to_masters
    #             )
    #         ],
    #         CHOOSING_DATE: [
    #             MessageHandler(
    #                 filters.Regex(r'^–ü–æ–∂–µ–ª–∞–Ω–∏—è'),
    #                 handle_date_selection
    #             ),
    #             MessageHandler(
    #                 filters.Regex(r'^üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º$'),
    #                 back_to_dates
    #             )
    #         ],
    #         ENTERING_WISHES: [
    #             MessageHandler(filters.TEXT & ~filters.COMMAND, enter_wishes),
    #         ]
    #     },
    #     conversation_timeout=300,
    #     fallbacks=[CommandHandler('start', start),
    #                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$")]
    # )
    # app.add_handler(conv_handler)
    # app.add_handler(CallbackQueryHandler(start, pattern="^back_to_menu$"))

    # –î—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    # app.add_handler(CallbackQueryHandler(handle_back, pattern="^back_to_"))

    app.run_polling()


if __name__ == '__main__':
    main()


async def back_to_masters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query
    if query:
        await query.answer()

    # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    if 'service' in context.user_data:
        del context.user_data['service']

    keyboard = [
        [InlineKeyboardButton("–ö—Å–µ–Ω–∏—è üíÖ"), InlineKeyboardButton("–ê–Ω–∞—Å—Ç–∞—Å–∏—è üëë")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]

    if query:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return CHOOSING_MASTER


# async def back_to_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏"""
#     return await handle_date_selection(update, context)