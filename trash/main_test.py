import logging
from datetime import datetime, timedelta

from telegram import (
    BotCommand,
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove
)

from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECTING_ACTION, CHOOSING_MASTER, CHOOSING_SERVICE, CHOOSING_DATE, ENTERING_WISHES = map(chr, range(5))
END = ConversationHandler.END

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
users_data = {}


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
def generate_dates():
    return [
        (datetime.now() + timedelta(days=i)).strftime("%d.%m %H:%M")
        for i in range(1, 8)
    ]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [
            InlineKeyboardButton("üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=str(CHOOSING_MASTER)),
            # InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")
        ],
    ]

    if update.message:
        await update.message.reply_text(
            "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Beauty Bits!* üå∏\n\n"
            "üéÄ *–ê–∫—Ü–∏—è:* –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 15%!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Beauty Bits!* üå∏\n\n"
            "üéÄ *–ê–∫—Ü–∏—è:* –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 15%!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    return SELECTING_ACTION


async def choose_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = context._user_id
    if user not in users_data:
        users_data[user] = {}

    keyboard = [
        [InlineKeyboardButton("–ö—Å–µ–Ω–∏—è üíÖ", callback_data="–ö—Å–µ–Ω–∏—è")],
        [InlineKeyboardButton("–ê–Ω–∞—Å—Ç–∞—Å–∏—è üëë", callback_data="–ê–Ω–∞—Å—Ç–∞—Å–∏—è")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=str(END))]
    ]

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    return CHOOSING_MASTER


async def choose_service(update: Update, context: CallbackContext) -> int:
    # master = update.callback_query.data
    # master = update.message.text
    # context.user_data['master'] = master
    query = update.callback_query
    await query.answer()
    master = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    context.user_data['master'] = master
    if master == "–ö—Å–µ–Ω–∏—è":
        services = [
            [InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä üíÖ", callback_data="service_1")],
            [InlineKeyboardButton("–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä üîß", callback_data="service_2")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º", callback_data=str(CHOOSING_MASTER))]
        ]
    else:
        services = [
            [InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä üíÖ", callback_data="service_3")],
            [InlineKeyboardButton("–ü–µ–¥–∏–∫—é—Ä üë£", callback_data="service_4")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º", callback_data=str(CHOOSING_MASTER))]
        ]

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(services)
    )
    return CHOOSING_SERVICE
    # if "–ö—Å–µ–Ω–∏—è" in master:
    #     services = [
    #         [InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä üíÖ")],
    #         [InlineKeyboardButton("–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä üîß")],
    #         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º")]
    #     ]
    # else:
    #     services = [
    #         [InlineKeyboardButton("–ú–∞–Ω–∏–∫—é—Ä üíÖ")],
    #         [InlineKeyboardButton("–ü–µ–¥–∏–∫—é—Ä üë£")],
    #         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º")]
    #     ]
    #
    # await update.message.reply_text(
    #     "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
    #     reply_markup=InlineKeyboardMarkup(services),
    # )
    #
    # return CHOOSING_SERVICE


async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    service = update.message.text
    users_data[context._user_id]["service"] = service

    dates = generate_dates()
    keyboard = [[InlineKeyboardButton(date, callback_data=f"date_{date}")] for date in dates] \
               + [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services")]]

    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CHOOSING_DATE


async def enter_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()

    date = query.data.split('_')[1]
    users_data[context._user_id]['date'] = date

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    await query.edit_message_reply_markup(reply_markup=None)

    await query.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=ReplyKeyboardMarkup([
            ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º"]
        ], resize_keyboard=True)
    )
    return ENTERING_WISHES


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    wishes = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã" if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else update.message.text
    users_data[context._user_id]['wishes'] = wishes

    booking = users_data[context._user_id]
    text = (
        "‚ú® *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!* ‚ú®\n\n"
        f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {booking['master']}\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {booking['service']}\n"
        f"üìÖ –î–∞—Ç–∞: {booking['date']}\n"
        f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}"
    )

    await update.message.reply_text(
        text,
        parse_mode="Markdown"
    )
    await start(update, context)
    return ConversationHandler.END


async def set_commands(app: Application):
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("new_booking", "–ó–∞–ø–∏—Å—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä"),
        BotCommand("my_bookings", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"),
        BotCommand("masters", "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
    ]
    await app.bot.set_my_commands(commands)


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await start(update, context)
    return ConversationHandler.END


def main():
    app = Application.builder().token("7874319913:AAENKsWWF2xGSUd94dHIGiObAkAJE_CuAAs").post_init(set_commands).build()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    app.add_handler(CommandHandler('start', start))

    booking_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                choose_master, pattern=f"^{str(CHOOSING_MASTER)}$"
            )
        ],
        states={
            CHOOSING_MASTER: [
                CallbackQueryHandler(choose_service, pattern="^(–ö—Å–µ–Ω–∏—è|–ê–Ω–∞—Å—Ç–∞—Å–∏—è)$")
            ],
            CHOOSING_SERVICE: [CallbackQueryHandler(choose_date, pattern="^service_")],
            CHOOSING_DATE: [
                CallbackQueryHandler(enter_wishes, pattern="^" + str(ENTERING_WISHES) + "$")
            ],
            # ENTERING_WISHES: [
            #     CallbackQueryHandler(enter_wishes, pattern="^" + str(ENTERING_WISHES) + "$")
            # ]
        },
        fallbacks=[
            CallbackQueryHandler(back_to_menu, pattern="^" + str(END) + "$"),
        ],
        map_to_parent={
            # Return to second level menu
            END: SELECTING_ACTION,
        },
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            # SHOWING: [CallbackQueryHandler(start, pattern="^" + str(END) + "$")],
            SELECTING_ACTION: [booking_conv],
            # SELECTING_LEVEL: selection_handlers,
            # DESCRIBING_SELF: [description_conv],
            # STOPPING: [CommandHandler("start", start)],
        },
        fallbacks=[CommandHandler("stop", back_to_menu)],
    )

    app.add_handler(conv_handler)

    app.run_polling()


if __name__ == '__main__':
    main()