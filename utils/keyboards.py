from aiogram import types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)


def main_menu_kb(is_admin: bool = False):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book"),
         InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
        [InlineKeyboardButton(text="üåü –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞", callback_data="masters")]
    ])
    if is_admin:
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="clients")])
    return keyboard


def admin_choice_kb():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∏", callback_data="clients_books"),
         InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="clients_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"start")]
    ])
    return keyboard


def admin_dates_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_users_books_today")],
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="show_users_books_tomorrow")],
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="show_users_books_week")],
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_users_books_month")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"clients")]
    ])


def admin_stats_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_users_stats_today")],
        [InlineKeyboardButton(text="–ó–∞ –≤—á–µ—Ä–∞", callback_data="show_users_stats_yesterday")],
        [InlineKeyboardButton(text="–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é", callback_data="show_users_stats_week")],
        [InlineKeyboardButton(text="–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="show_users_stats_month")],
        [InlineKeyboardButton(text="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="show_users_stats_all")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"clients")]
    ])


def master_choice_kb(edit_mode: bool = False, booking_id: str = None):
    text_suffix = f"_edit_{booking_id}" if edit_mode else ""
    callback_suffix = "back_to_bookings" if edit_mode else "start"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—Å–µ–Ω–∏—è üíÖ", callback_data=f"master_kseniya{text_suffix}")],
        [InlineKeyboardButton(text="–ê–Ω–∞—Å—Ç–∞—Å–∏—è üëë", callback_data=f"master_anastasia{text_suffix}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_suffix)]
    ])


def service_choice_kb(master: str, edit_mode: bool = False, booking_id: str = None):
    text_suffix = f"_edit_{booking_id}" if edit_mode else ""
    if master == "kseniya":
        services = [
            ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä üíÖ", f"service_classic{text_suffix}"],
            ["–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä üîß", f"service_apparatus{text_suffix}"]
        ]
    else:
        services = [
            ["–ú–∞–Ω–∏–∫—é—Ä üíÖ", f"service_manicure{text_suffix}"],
            ["–ü–µ–¥–∏–∫—é—Ä üë£", f"service_pedicure{text_suffix}"]
        ]
    buttons = [
        [types.InlineKeyboardButton(text=text, callback_data=data)]
        for text, data in services
    ]
    if not edit_mode:
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="book")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def wishes_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True
    )


def bookings_kb(bookings):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for data in bookings:
        text = f"{data.start_datetime.date()} - {data.service} ({data.master})"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"view_booking_{data.booking_id}"
            )
        ])

    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")])
    return keyboard


def booking_selection_kb(booking_id: str):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{booking_id}"),
            types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{booking_id}")
        ],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_bookings")]
    ])
    return keyboard


def time_keyboard(available_slots: list, edit_mode: bool = False, booking_id: str = None):
    text_suff = f"_{booking_id}" if edit_mode else ''
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for slot in available_slots:
        slot = slot.replace('"', '')
        keyboard.inline_keyboard.append([InlineKeyboardButton(
            text=slot,
            callback_data=f"time_{slot}{text_suff}"
        )])
    if not edit_mode:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar")])
    return keyboard


def edit_booking_kb(booking_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä–∞", callback_data=f"editingMaster_{booking_id}")],
        [types.InlineKeyboardButton(text="–£—Å–ª—É–≥—É", callback_data=f"editingService_{booking_id}")],
        [types.InlineKeyboardButton(text="–î–∞—Ç—É", callback_data=f"editingDate_{booking_id}")],
        [types.InlineKeyboardButton(text="–ü–æ–∂–µ–ª–∞–Ω–∏—è", callback_data=f"editingWishes_{booking_id}")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_bookings")]
    ])
